module AdventOfCode
  module Puzzles2023
    module Day10
      class Tile
        CONNECTIONS: Hash[Symbol, Hash[Symbol, Array[Symbol]]]

        attr_reader sym: Symbol
        attr_reader pos: Array[Integer]

        def initialize: (Symbol, Array[Integer]) -> void

        def can_connect?: (Tile, Symbol) -> bool
      end

      class Movement
        GO_UP: Movement
        GO_DOWN: Movement
        GO_RIGHT: Movement
        GO_LEFT: Movement

        attr_reader movement: Array[Integer]

        def initialize: (Array[Integer]) -> void

        def apply: (Array[Integer]) -> Array[Integer]
      end

      class Part1
        attr_reader data: Array[Array[Symbol]]

        def initialize: (String) -> void

        def answer: -> Integer

        def parse_file: (String) -> void

        def find_starting_tile: () -> Tile

        def replace_s_with_real_tile: (Tile) -> Tile

        def find_path: () -> Array[Tile]

        def next_tile: (Tile, Symbol) -> Tile?

        def valid_pos?: (Array[Integer]) -> bool

        def find_next_tile: (Tile, Tile) -> Tile
      end

      class Part2 < Part1
        NO_CHANGE_STATE_COMBINATIONS: Set[Symbol]
        OPEN_PATH_COMBINATIONS: Set[Symbol]
        CLOSE_PATH_COMBINATIONS: Set[Symbol]

        attr_reader path: Array[Tile]

        def count_inner_tiles: -> Integer

        def tile_is_inside?: (Tile, bool?, Symbol?) -> Array[bool | Symbol]

        def state_has_changed?: (Tile, Symbol?) -> Array[bool | Symbol?]

        def check_combination: (Symbol, Symbol?) -> Array[bool | Symbol?]

        def previous_tile: (Tile) -> Tile
      end
    end
  end
end
